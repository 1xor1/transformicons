---
basename: docs
title: Transformicons Documentation
description: References and Explanation
---

  <section class="fragment">
    <h2 id="markup">Markup</h2>
<h3 id="foundation">Foundation</h3>
<p>Our markup is strong and built with <a href="http://a11yproject.com">A11Y</a> in mind. Since not all screen readers know what <code>aria-label</code> is yet
we&#39;ve chosen to include important text in a <code>.tcon-visuallyhidden</code> span using the <a href="https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/main.css#L133-L142">HTML5 Boilerplate</a> method that is screen reader friendly.</p>
<p><strong>Buttons</strong></p>
<pre><code class="lang-markup">&lt;button type=&quot;button&quot; class=&quot;tcon&quot; aria-label=&quot;[description]&quot;&gt;
  &lt;span class=&quot;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;
  &lt;span class=&quot;tcon-visuallyhidden&quot;&gt;[screen reader text]&lt;/span&gt;
&lt;/button&gt;
</code></pre>
<p><strong>Symbols/Icons</strong></p>
<pre><code class="lang-markup">&lt;span class=&quot;tcon&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;
</code></pre>

  </section>

  <section class="fragment">
    <h2 id="sass">Sass</h2>
<h3 id="structure">Structure</h3>
<p>Using the custom builder authors have the option to customize their Sass port of Transformicons.
Each Sass partial is structured according to config, variation and icon(s) chosen. Your specific <code>_tcons.scss</code> file will vary depending on your custom build
options chosen.</p>
<p><code><strong>_tcons.scss</strong></code></p>
<pre><code class="lang-scss">// Config
@import &quot;base/config-globals&quot;;
@import &quot;base/config-menu&quot;;
@import &quot;base/config-utilities&quot;;
@import &quot;base/global-styles&quot;;

// Variations
@import &quot;style/menu-lines&quot;;

// Icons
@import &quot;type/menu-xcross&quot;;
@import &quot;type/menu-xbutterfly&quot;;
</code></pre>

  </section>

  <section class="fragment">
    <h2 id="javascript">Javascript</h2>
<h3 id="benefits">Benefits</h3>
<p>Transformicons are mostly powered by CSS however, a little piece of JavaScript is required to toggle the transformed states. We&#39;ve taken the time to ensure the greatest amount of flexibility has been given to the code so that you the author can haveâ€¦</p>
<ul>
<li><strong>Full Event Control</strong> : A user should be able to define arbitrary events and specify which one should transform and which one reverts the icon. We allow you to choose, but by default we use <code>click</code> and <code>touchstart</code>.</li>
<li><strong>UMD Pattern</strong> : Using the Universal Module Definition pattern supports synchronous and asynchronous loading like <a href="http://requirejs.org">require.js</a>. In synchronous mode the global transformicon is exported, while with asynchronous loading a reference can be custom.</li>
<li><strong>Encapsulation</strong> : Polluting the global namespace is bad practice. We only add the global handle (<code>transformicon</code>) to the root, if loaded synchronously.</li>
</ul>
<h3 id="arguments">Arguments</h3>
<table>
  <thead>
    <tr>
      <th>Argument</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th><code>elements</code></th>
      <td>(string|element|array)</td>
      <td>Selector, DOM element or Array of DOM elements to be toggled</td>
    </tr>
    <tr>
      <th><code>events</code></th>
      <td>{object}</td>
      <td>An Object containing one or more special event definitions</td>
    </tr>
  </tbody>
</table>

<h3 id="objects">Objects</h3>
<table>
  <thead>
    <tr>
      <th>Property</th>
      <th>Value</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th><code>transform</code></th>
      <td><code>{(string|array)}</code></td>
      <td>One or more events that trigger the transform. Can be an Array or string with events seperated by space.</td>
    </tr>
    <tr>
      <th><code>revert</code></th>
      <td><code>{(string|array)}</code></td>
      <td>One or more events that trigger the reversion. Can be an Array or string with events seperated by space.</td>
    </tr>
  </tbody>
</table>


<h3 id="methods">Methods</h3>
<table>
  <thead>
    <tr>
      <th>Event Method</th>
      <th>Arguments</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th><code>transformicons.add()</code></th>
      <td><code>elements, events</code></td>
      <td>Adds functionality to elements. If no events are supplied, the default click events are used</td>
    </tr>
    <tr>
      <th><code>transformicons.transform()</code></th>
      <td><code>elements</code></td>
      <td>Manually trigger a transform</td>
    </tr>
    <tr>
      <th><code>transformicons.remove()</code></th>
      <td><code>elements, events</code></td>
      <td>Removes functionality from elements. If no events are supplied, the default click events are used</td>
    </tr>
    <tr>
      <th><code>transformicon.revert()</code></th>
      <td><code>elements</code></td>
      <td>Manually trigger reversion to original state</td>
    </tr>
    <tr>
      <th><code>transformicon.toggle()</code></th>
      <td><code>elements</code></td>
      <td>Toggle between transformed and original state</td>
    </tr>
  </tbody>
</table>

<p><code><strong>transformicons.js</strong></code></p>
<pre><code class="lang-javascript">transformicons.add(&#39;.tcon&#39;) // add default behavior for all elements with the class .tcon
              .remove(&#39;.tcon-menu--xcross&#39;) // remove default behavior for the first icon
              .add(&#39;.tcon-menu--xcross&#39;, {
                  transform: &quot;mouseover&quot;,
                  revert: &quot;mouseout&quot;
              }); // add new behavior for the first icon
</code></pre>

  </section>

